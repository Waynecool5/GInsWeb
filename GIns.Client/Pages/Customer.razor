@page "/customer"
@using GIns.Shared
@inject HttpClient Http


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<form id="formImage" method="post" enctype="multipart/form-data" action="api/Excel/ImportExcelAsync">
    <div>
        <label for="caption">Image Caption</label>
        <input name="Paco.Caption" type="text" />
    </div>
    @*<div>
            <label for="caption">Image Caption</label>
            <input name="MyPoco.Name" type="text" bind="@model.Name" />
        </div>
        <div>
            <label for="caption">Image Caption</label>
            <input name="MyPoco.Id" type="text" bind="@model.Id"  @bind="formFile"/>
        </div>*@
    <div>
        <label for="image1">Image File</label>
        <input name="formFile" type="file" />
    </div>
    <div>
        <input type="submit" value="Submit" />
    </div>
   @* <button class=”btn btn-primary @onclick="@ReadFile"></button>*@
</form>


@if (_Customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>DateOfBirth</th>
                <th>First_Name</th>
                <th>Last_Name</th>
                <th>Address1</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Cust in _Customers)
            {
                <tr>
                    <td>@Cust.DateOfBirth.ToShortDateString()</td>
                    <td>@Cust.First_Name</td>
                    <td>@Cust.Last_Name</td>
                    <td>@Cust.Address1</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

Customers[] _Customers;
//ElementRef inputTypeFileElement;
int Mode = 0;



protected override async Task OnInitAsync()
{
    _Customers = await Http.GetJsonAsync<Customers[]>("api/Customer/GetCustomersAsync?" + Mode);

}

//public async Task ReadFile()
//{
//    tester _test = new tester();
//    try
//    {
//        _test.File = formFile; ;

//        Customers _Customers = await Http.PostJsonAsync<Customers>("api/excel/import", _test);
//    }
//    catch (Exception e)
//    {
//        Console.WriteLine(e);
//        throw;
//    }
//}




    @*public async Task sendData
        {
            if (!string.IsNullOrWhiteSpace(Token.Token))
                        {
                            using (var _client = new HttpClient())
                            {
                                //Call Thani's Web Api
                                _client.BaseAddress = new Uri(gsStore.WebThaniApiPath);// https://localhost:44305/");
                                _client.DefaultRequestHeaders.Accept.Clear();
                                _client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                                //var t = JsonConvert.DeserializeObject<Token>(token);

                                _client.DefaultRequestHeaders.Clear();
                                _client.DefaultRequestHeaders.Add("Authorization", "Bearer " + Token.Token.ToString());// t.access_token);

                                HttpResponseMessage response = await _client.PostAsJsonAsync("api/excel/import?"formFile=" + apiType.ToString(), Points);

                                response.EnsureSuccessStatusCode();

                                if (response.IsSuccessStatusCode)
                                {
                                    Tpoints = await response.Content.ReadAsAsync<MassyResponse>();

                                    return true;
                                }
                                else
                                {
                                    return false;
                                }
                                // return URI of the created resource.
                                //return response.Headers.Location;

                                //return response.IsSuccessStatusCode;




                            }
                        }
                        else
                        {
                            Console.WriteLine("Secure access not granted.");
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        return false;
                    }
        }*@


}


